{"ast":null,"code":"var _jsxFileName = \"/var/www/html/Blue-Diamond-App/src/withAuth.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport API from './service/signup.service';\nexport default function withAuth(ComponentToProtect) {\n  return class extends Component {\n    constructor() {\n      super();\n      this.state = {\n        loading: true,\n        redirect: false\n      };\n    }\n    /** first call this function during app run */\n\n\n    componentDidMount() {\n      /** Get token from localstorage & pass token in header */\n      const Token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'JWT fefege...',\n        'token': Token\n        /** \n         * @param {string} token\n         * user get token and check token \n         * */\n\n      };\n\n      if (Token) {\n        API.authenticate().then(res => {\n          if (res.status === 200) {\n            this.setState({\n              loading: false\n            });\n          } else {\n            const error = new Error(res.error);\n            throw error;\n          }\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            loading: false,\n            redirect: true\n          });\n        });\n      } else {\n        alert('no token provided');\n        this.setState({\n          loading: false,\n          redirect: true\n        });\n      }\n    }\n    /** Render app using token */\n\n\n    render() {\n      const _this$state = this.state,\n            loading = _this$state.loading,\n            redirect = _this$state.redirect;\n\n      if (loading) {\n        return null;\n      }\n      /** Token not get then redirect in signup page */\n\n\n      if (redirect) {\n        return React.createElement(Redirect, {\n          to: \"/signup\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ComponentToProtect, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })));\n    }\n\n  };\n}","map":{"version":3,"sources":["/var/www/html/Blue-Diamond-App/src/withAuth.js"],"names":["React","Component","Redirect","API","withAuth","ComponentToProtect","constructor","state","loading","redirect","componentDidMount","Token","localStorage","getItem","headers","authenticate","then","res","status","setState","error","Error","catch","err","console","alert","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AAEA,eAAe,SAASC,QAAT,CAAkBC,kBAAlB,EAAsC;AACnD,SAAO,cAAcJ,SAAd,CAAwB;AAC7BK,IAAAA,WAAW,GAAG;AACZ;AACA,WAAKC,KAAL,GAAa;AACXC,QAAAA,OAAO,EAAE,IADE;AAEXC,QAAAA,QAAQ,EAAE;AAFC,OAAb;AAID;AAED;;;AACAC,IAAAA,iBAAiB,GAAG;AAElB;AACA,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,YAAMC,OAAO,GAAG;AACd,wBAAgB,kBADF;AAEd,yBAAiB,eAFH;AAGd,iBAASH;AAGX;;;;;AANgB,OAAhB;;AAUA,UAAIA,KAAJ,EAAW;AACTR,QAAAA,GAAG,CAACY,YAAJ,GACGC,IADH,CACQC,GAAG,IAAI;AACX,cAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,iBAAKC,QAAL,CAAc;AAAEX,cAAAA,OAAO,EAAE;AAAX,aAAd;AACD,WAFD,MAEO;AACL,kBAAMY,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,GAAG,CAACG,KAAd,CAAd;AACA,kBAAMA,KAAN;AACD;AACF,SARH,EASGE,KATH,CASSC,GAAG,IAAI;AACZC,UAAAA,OAAO,CAACJ,KAAR,CAAcG,GAAd;AACA,eAAKJ,QAAL,CAAc;AAAEX,YAAAA,OAAO,EAAE,KAAX;AAAkBC,YAAAA,QAAQ,EAAE;AAA5B,WAAd;AACD,SAZH;AAaD,OAdD,MAcO;AACLgB,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACA,aAAKN,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAAd;AACD;AACF;AAED;;;AACAiB,IAAAA,MAAM,GAAG;AAAA,0BACuB,KAAKnB,KAD5B;AAAA,YACCC,OADD,eACCA,OADD;AAAA,YACUC,QADV,eACUA,QADV;;AAEP,UAAID,OAAJ,EAAa;AACX,eAAO,IAAP;AACD;AAED;;;AACA,UAAIC,QAAJ,EAAc;AACZ,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,kBAAD,oBAAwB,KAAKkB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD;;AA5D4B,GAA/B;AA8DD","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport API from './service/signup.service';\n\nexport default function withAuth(ComponentToProtect) {\n  return class extends Component {\n    constructor() {\n      super();\n      this.state = {\n        loading: true,\n        redirect: false,\n      };\n    }\n\n    /** first call this function during app run */\n    componentDidMount() {\n\n      /** Get token from localstorage & pass token in header */\n      const Token = localStorage.getItem('token');\n      const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'JWT fefege...',\n        'token': Token\n      }\n\n      /** \n       * @param {string} token\n       * user get token and check token \n       * */\n      if (Token) {\n        API.authenticate()\n          .then(res => {\n            if (res.status === 200) {\n              this.setState({ loading: false });\n            } else {\n              const error = new Error(res.error);\n              throw error;\n            }\n          })\n          .catch(err => {\n            console.error(err);\n            this.setState({ loading: false, redirect: true });\n          });\n      } else {\n        alert('no token provided');\n        this.setState({ loading: false, redirect: true });\n      }\n    }\n\n    /** Render app using token */\n    render() {\n      const { loading, redirect } = this.state;\n      if (loading) {\n        return null;\n      }\n\n      /** Token not get then redirect in signup page */\n      if (redirect) {\n        return <Redirect to=\"/signup\" />;\n      }\n      return (\n        <React.Fragment>\n          <ComponentToProtect {...this.props} />\n        </React.Fragment>\n      );\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}