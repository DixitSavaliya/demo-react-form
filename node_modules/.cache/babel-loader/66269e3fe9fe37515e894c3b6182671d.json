{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config';\nexport default {\n  /** \n   * @param {json}\n   * user signup\n   */\n  Signup: obj => {\n    console.log(\"obj:\", obj);\n    return axios.post(config.baseApiUrl + \"api/signup\", obj).then(response => {\n      return response;\n    }).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /** \n   * @param {json}\n   * user login\n   */\n  Login: obj => {\n    console.log(\"obj==\", obj);\n    return axios.post(config.baseApiUrl + \"api/login\", obj).then(response => {\n      return response;\n    }).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /** \n    * @param {json}\n    * forgot password\n    */\n  ForgotPassword: obj => {\n    return axios.post(config.baseApiUrl + \"api/resetPassword\", obj).then(response => {\n      return response;\n    }).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /** \n    * @param {json}\n    * update password\n    */\n  UpdatePasswordUser: obj => {\n    const Token = localStorage.getItem('token');\n    console.log(\"token==\", Token);\n    console.log(\"data======\", obj);\n    const headers = {\n      'content-type': 'application/json',\n      'Authorization': 'JWT fefege...',\n      'token': Token\n    };\n    return axios.post(config.baseApiUrl + \"api/updatePassword\", obj, {\n      headers: headers\n    }).then(response => {\n      return response;\n    }).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  },\n\n  /** \n     * @param {json}\n     * reset password\n     */\n  ResetPassword: (obj, hash) => {\n    console.log(\"hash===\", obj, hash);\n    return axios.post(config.baseApiUrl + \"api/email-verify/\" + hash, obj).then(response => {\n      return response;\n    }).catch({\n      status: 500,\n      message: 'Internal Server Error'\n    });\n  }\n};","map":{"version":3,"sources":["/var/www/html/Blue-Diamond-App/src/service/signup.service.js"],"names":["axios","config","Signup","obj","console","log","post","baseApiUrl","then","response","catch","status","message","Login","ForgotPassword","UpdatePasswordUser","Token","localStorage","getItem","headers","ResetPassword","hash"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,eAAe;AAEX;;;;AAIAC,EAAAA,MAAM,EAAGC,GAAD,IAAS;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACA,WAAOH,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACM,UAAP,GAAoB,YAA/B,EAA6CJ,GAA7C,EACFK,IADE,CACGC,QAAQ,IAAI;AACd,aAAOA,QAAP;AACH,KAHE,EAGAC,KAHA,CAGM;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAHN,CAAP;AAIH,GAZU;;AAcX;;;;AAIAC,EAAAA,KAAK,EAAGV,GAAD,IAAS;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB;AACA,WAAOH,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACM,UAAP,GAAoB,WAA/B,EAA4CJ,GAA5C,EACFK,IADE,CACGC,QAAQ,IAAI;AACd,aAAOA,QAAP;AACH,KAHE,EAGAC,KAHA,CAGM;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAHN,CAAP;AAIH,GAxBU;;AA0BX;;;;AAIAE,EAAAA,cAAc,EAAGX,GAAD,IAAS;AACrB,WAAOH,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACM,UAAP,GAAoB,mBAA/B,EAAoDJ,GAApD,EACFK,IADE,CACGC,QAAQ,IAAI;AACd,aAAOA,QAAP;AACH,KAHE,EAGAC,KAHA,CAGM;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAHN,CAAP;AAIH,GAnCU;;AAqCX;;;;AAIAG,EAAAA,kBAAkB,EAAGZ,GAAD,IAAS;AACzB,UAAMa,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,KAAvB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,GAA1B;AACA,UAAMgB,OAAO,GAAG;AACZ,sBAAgB,kBADJ;AAEZ,uBAAiB,eAFL;AAGZ,eAASH;AAHG,KAAhB;AAKA,WAAOhB,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACM,UAAP,GAAoB,oBAA/B,EAAqDJ,GAArD,EAA0D;AAAEgB,MAAAA,OAAO,EAAEA;AAAX,KAA1D,EACFX,IADE,CACGC,QAAQ,IAAI;AACd,aAAOA,QAAP;AACH,KAHE,EAGAC,KAHA,CAGM;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAHN,CAAP;AAIH,GAtDU;;AAwDX;;;;AAIAQ,EAAAA,aAAa,EAAE,CAACjB,GAAD,EAAMkB,IAAN,KAAe;AAC1BjB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB,EAA4BkB,IAA5B;AACA,WAAOrB,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACM,UAAP,GAAoB,mBAApB,GAA0Cc,IAArD,EAA2DlB,GAA3D,EACFK,IADE,CACGC,QAAQ,IAAI;AACd,aAAOA,QAAP;AACH,KAHE,EAGAC,KAHA,CAGM;AAAEC,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KAHN,CAAP;AAIH;AAlEU,CAAf","sourcesContent":["import axios from 'axios';\nimport { config } from '../config';\n\nexport default {\n    \n    /** \n     * @param {json}\n     * user signup\n     */\n    Signup: (obj) => {\n        console.log(\"obj:\", obj)\n        return axios.post(config.baseApiUrl + \"api/signup\", obj)\n            .then(response => {\n                return response;\n            }).catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /** \n     * @param {json}\n     * user login\n     */\n    Login: (obj) => {\n        console.log(\"obj==\", obj);\n        return axios.post(config.baseApiUrl + \"api/login\", obj)\n            .then(response => {\n                return response;\n            }).catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /** \n      * @param {json}\n      * forgot password\n      */\n    ForgotPassword: (obj) => {\n        return axios.post(config.baseApiUrl + \"api/resetPassword\", obj)\n            .then(response => {\n                return response;\n            }).catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /** \n      * @param {json}\n      * update password\n      */\n    UpdatePasswordUser: (obj) => {\n        const Token = localStorage.getItem('token');\n        console.log(\"token==\", Token);\n        console.log(\"data======\", obj);\n        const headers = {\n            'content-type': 'application/json',\n            'Authorization': 'JWT fefege...',\n            'token': Token\n        }\n        return axios.post(config.baseApiUrl + \"api/updatePassword\", obj, { headers: headers })\n            .then(response => {\n                return response;\n            }).catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /** \n       * @param {json}\n       * reset password\n       */\n    ResetPassword: (obj, hash) => {\n        console.log(\"hash===\", obj, hash);\n        return axios.post(config.baseApiUrl + \"api/email-verify/\" + hash, obj)\n            .then(response => {\n                return response;\n            }).catch({ status: 500, message: 'Internal Server Error' });\n    }\n}"]},"metadata":{},"sourceType":"module"}